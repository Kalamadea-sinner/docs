swagger: "2.0"
info:
  description: |
    This is a draft for solarisBank Digital Assets Platform API
    ## Authentication
    We require our partners to generate a pair of private & public keys. Partners shall register the public key with us and sign every request to our API using their private key.

    We are using *HTTP Signatures* IETF draft as the base for our authentication mechanism. As the digital signature algorithm in HTTP Signatures we are using *Ed25519*.

    Every request is required to have additional headers:

    * Digest
    * X-Nonce
    * Signature

    ### Digest Header

    The `Digest` header ensures integrity of the HTTP request body. It MUST be constructed following the HTTP Instance Digests RFC using SHA-256 algorithm.

    In case of GET request, the `Digest` header still must be constructed, assuming the request body is an empty string.

    See:

    * Instance Digests in HTTP <https://tools.ietf.org/html/rfc3230>
    * Additional Hash Algorithms for HTTP Instance Digests <https://tools.ietf.org/html/rfc5843>

    ```
    Digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=
    ```

    ### X-Nonce Header

    The `X-Nonce` header is supposed to uniquely identify the HTTP request and serves to protect against the replay/playback attacks.

    The `X-Nonce` value MUST be a string of up to 32 characters, which MUST unique across all the requests generated using the same API key.

    As an example, `X-Nonce` value may be generated as 16-bytes random integer in hexadecimal representation.

    ```
    X-Nonce: 514bdd41b15f6b1a0443f8c673adc9db
    ```

    ### Signature Header

    Signature Header string is used to provide authentication and integrity assurances without the need for shared secrets. It also do not requires a round-trip in order to authenticate the client and allows the integrity of a message to be verified independently of the transport.

    Signature Parameters:

    * **keyId**

      *Unique ID which is associated with Partner Public Key.*

    * **algorithm**

      *The value for the `algorithm` parameter MUST be `"hs2019"`.*

    * **created**

      *The value of the `created` parameter MUST be the time at which the HTTP request was constructed as an integer Unix timestamp.*

    * **headers**

      *The `headers` parameter identifies how the canonical Signature String is constructed. Its value consists of a list of actual and pseudo- HTTP headers which will form the Signature String according to the HTTP Signatures draft v11.*

      *The `headers` parameter MUST include following headers: `(request-target)`, `(created)`, `digest`, `x-nonce`.*

      *The recommended value of the `headers` parameter is: `(request-target) (created) digest x-nonce`.*

      *See:*

      * *Signature String Construction <https://tools.ietf.org/html/draft-cavage-http-signatures-11#section-2.3>*

      *Example of Signature String for headers="(request-target) (created) digest x-nonce":*

      ```

      (request-target): get /foo?bar=123\n
      (created): 1557855475\n
      digest: SHA-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=\n
      x-nonce: 7c44d38b63f5e398af62d603b1155f5c

      ```

      *Here `\n` indicate the ASCII newline character. Note the absence of it on the last line.*

    * **signature**

      *The value of the `signature` parameter is the digital signature of the HTTP request produced by the partner's private key.*

      *In order to create the `signature` parameter:*

      * *Construct the canonical Signature String according to the value of the `headers` parameter*

      * *Using the private key that corresponds to the provided `keyId` generate an Ed25519 signature of the Signature String obtained on a previous step*

      * *Base64-encode the signature*

    ### Examples

    ```
    POST /foo/bar
    Digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=
    X-Nonce: 514bdd41b15f6b1a0443f8c673adc9db
    Signature: keyId="foobar",algorithm="hs2019",created=1557855475,headers="(request-target) (created) digest x-nonce",signature="IKGyxGiUFm3luudWGkTzf0TYQD2Fnkb6ed6BTfuXuDq/U9q6gQk6KxBSPx33ME1O2RLlH5HKG2WZnO8PgRGiDA=="

    {"hello": "world"}
    ```

    ```
    GET /foo?bar=123
    Digest: SHA-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=
    X-Nonce: 7c44d38b63f5e398af62d603b1155f5c
    Signature: keyId="foobar",algorithm="hs2019",created=1557855475,headers="(request-target) (created) digest x-nonce",signature="d0Wzjlpt2Y++DJtxKnD1ipkkwF5eU43jwtybqsy3tFqa5P3kYYIJa4TTQyMUZ62i58jwN7gK6q2MVJBDGQ6tDg=="
    ```

    See:

    * HTTP Signatures, <https://tools.ietf.org/html/draft-cavage-http-signatures-11>
    * Ed25519, <https://ed25519.cr.yp.to/>
  version: "0.5.0"
  title: "solarisBank Digital Assets Platform API"
  contact:
    email: "Alexis.Hamel@solarisbank.de"
host: "api.sb-cryptocustody-sandbox.aws.solarisbank.io"
basePath: "/v1"
tags:
- name: "Asset"
  description: "Everything related to viewing assets"
- name: "Wallet"
  description: "Everything related to viewing wallets"
- name: "Entity"
  description: "Everything related to creating and viewing entities"
- name: "Account"
  description: "Everything related to creating and viewing accounts"
- name: "Address"
  description: "Everything related to creating and viewing addresses"
- name: "LedgerEntry"
  description: "Everything related to viewing ledger entries"
- name: "Transaction"
  description: "Everything related to viewing transactions"
- name: "Withdrawal"
  description: "Everything related to creating and viewing withdrawals"
- name: "Transfer"
  description: "Everything related to creating and viewing transfers"
schemes:
- "https"

paths:
  /assets:
    get:
      tags:
      - "Asset"
      summary: "Returns all assets"
      produces:
      - "application/json"
      responses:
        200:
          description: "Asset response"
          schema:
            type: object
            properties:
              items:
                type: array
                description: "An array containing assets"
                items:
                  $ref: "#/definitions/Asset"
  /assets/{asset_id}:
    get:
      tags:
      - "Asset"
      summary: "Get single asset by ID"
      consumes:
      - "-"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "asset_id"
        description: "Asset ID"
        required: true
        type: string
      responses:
        200:
          description: "Returns a JSON containing a single asset"
          schema:
            $ref: "#/definitions/Asset"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /wallets:
    get:
      tags:
      - "Wallet"
      summary: "Returns all wallets for this partner"
      produces:
      - "application/json"
      responses:
        200:
          description: "Wallet response"
          schema:
            type: object
            properties:
              items:
                type: array
                description: "An array containing all wallets of the partner"
                items:
                  $ref: "#/definitions/Wallet"
  /wallets/{wallet_id}:
    get:
      tags:
      - "Wallet"
      summary: "Get single wallet by ID"
      consumes:
      - "-"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "wallet_id"
        description: "Wallet ID"
        required: true
        type: string
      responses:
        200:
          description: "Returns a JSON containing a single wallet"
          schema:
            $ref: "#/definitions/Wallet"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities:
    get:
      tags:
      - "Entity"
      summary: "Returns all entities for this partner"
      produces:
      - "application/json"
      responses:
        200:
          description: "Entity response"
          schema:
            type: object
            properties:
              items:
                type: array
                description: "An array containing all entities of the partner"
                items:
                  $ref: "#/definitions/Entity"
    post:
      tags:
      - "Entity"
      summary: "Creates a new Entity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: object
          properties:
            person_id:
              type: string
              example: "some_id"
              description: "The ID of the person or partner for whom an entity will be created"
          required:
            - person_id
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Entity"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}:
    get:
      tags:
      - "Entity"
      summary: "Get single entity by ID"
      consumes:
      - "-"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "Entity ID"
        required: true
        type: string
      responses:
        200:
          description: "Returns a JSON containing a single entity"
          schema:
            $ref: "#/definitions/Entity"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts:
    get:
      tags:
      - "Account"
      summary: "Returns an array of accounts for an entity"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              items:
                type: array
                description: "An array containing all accounts of the entity"
                items:
                  $ref: "#/definitions/Account"
        403:
          description: "Forbidden"
        404:
          description: "Account not found"
        500:
          description: "Internal server error"
    post:
      tags:
      - "Account"
      summary: "Creates a new Account"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the account belong to"
        required: true
        type: string
      - in: "body"
        name: "body"
        schema:
          type: object
          properties:
            wallet_id:
              type: string
              example: "some_id"
              description: "The ID of the wallet for which an account will be created"
          required:
            - entity_id
            - wallet_id
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Account"
        400:
          description: "Invalid request"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Human readable error message"
                example: "Invalid request"
              params:
                type: object
                description: "Machine readable error message"
                properties:
                  wallet_id:
                    type: string
                    example: "not_found"
                    description: "Only present when wallet could not be found"
                  entity_id:
                    type: string
                    example: "not_found"
                    description: "Only present when entity could not be found"
        403:
          description: "Forbidden"
        404:
          description: "Account not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}:
    get:
      tags:
      - "Account"
      summary: "Returns a single account"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account to be shown"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Account"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/addresses:
    get:
      tags:
      - "Address"
      summary: "Returns an array of addresses for an account"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the addresses belong to"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              items:
                type: array
                description: "An array containing addresses"
                items:
                  $ref: "#/definitions/Address"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
    post:
      tags:
      - "Address"
      summary: "Creates new Address"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the addresses belong to"
        required: true
        type: string
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Address"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/addresses/{address_id}:
    get:
      tags:
      - "Address"
      summary: "Returns a single address"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the addresses belong to"
        required: true
        type: string
      - in: "path"
        name: "address_id"
        description: "ID of the address to be shown"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Address"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/ledger_entries:
    get:
      tags:
      - "LedgerEntry"
      summary: "Returns an array of ledger entries for a account"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the ledger entries belong to"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/definitions/LedgerEntry"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/ledger_entries/{ledger_entry_id}:
    get:
      tags:
      - "LedgerEntry"
      summary: "Returns a single ledger entry"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the ledger entry belongs to"
        required: true
        type: string
      - in: "path"
        name: "ledger_entry_id"
        description: "ID of the ledger entry to be shown"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/LedgerEntry"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/transactions:
    get:
      tags:
      - "Transaction"
      summary: "Returns an array of transactions for an account"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the transactions belong to"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/definitions/Transaction"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/transactions/{transaction_id}:
    get:
      tags:
      - "Transaction"
      summary: "Returns a single transaction"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the transactions belong to"
        required: true
        type: string
      - in: "path"
        name: "transaction_id"
        description: "ID of the transaction to be shown"
        required: true
        type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Transaction"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/transactions/withdrawal:
    post:
      tags:
      - "Withdrawal"
      summary: "Creates a new Transaction of type WITHDRAWAL"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the withdraw requests belong to"
        required: true
        type: string
      - in: "body"
        name: "body"
        schema:
          type: object
          properties:
            amount:
              type: string
              description: "Transacted amount (*required if `total_amount` is not specified)"
              example: "123.00010000"
            total_amount:
              type: string
              description: "Debited amount (*required if `amount` is not specified)"
            reference:
              type: string
              example: "some_partner_generated_string"
              description: "A reference identifier provided by the partner"
            address:
              type: "string"
              description: "A digital asset specific address, recipient of Withdrawal"
              example: "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
          required:
            - reference
            - address
            - amount
            - total_amount
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/TransactionReference"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  /entities/{entity_id}/accounts/{account_id}/transactions/transfer:
    post:
      tags:
      - "Transfer"
      summary: "Creates a new Transaction of type Transfer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "entity_id"
        description: "ID of the entity the accounts belong to"
        required: true
        type: string
      - in: "path"
        name: "account_id"
        description: "ID of the account the transfers belong to"
        required: true
        type: string
      - in: "body"
        name: "body"
        schema:
          type: object
          properties:
            amount:
              type: string
              description: "Transacted amount (*required if `total_amount` is not specified)"
              example: "123.00010000"
            total_amount:
              type: string
              description: "Debited amount (*required if `amount` is not specified)"
            reference:
              type: string
              example: "some_partner_generated_string"
              description: "A reference identifier provided by the partner"
            receiver_account_id:
              type: "string"
              description: "ID of the receiver account"
              example: "some_id"
          required:
            - reference
            - amount
            - total_amount
            - receiver_account_id
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/TransactionReference"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
definitions:
  Asset:
    type: object
    properties:
      id:
        type: string
        description: "ID of the asset"
        example: "some_id"
      code:
        type: string
        description: "A non-unique and non-permanent ISO code-like identifier of the digital asset"
        example: "BTC"
      precision:
        type: integer
        description: "Precision infos"
        example: 8
      description:
        type: string
        description: "Description of asset"
        example: "Bitcoin"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which the asset was created"
        example: "2019-02-02T13:43:34Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which the asset was updated"
        example: "2019-02-02T13:43:34Z"
  Wallet:
    type: object
    properties:
      id:
        type: string
        example: "some_id"
        description: "A unique identifier for this wallet provided by us"
      asset_id:
        type: string
        example: "some_id"
        description: "ID of the asset this wallet is created for"
      balance:
        type: string
        description: "Balance of the wallet"
        example: "123.00001234"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which the wallet was created"
        example: "2019-02-02T13:43:34Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which the wallet was updated"
        example: "2019-02-02T13:43:34Z"
  Entity:
    type: object
    properties:
      id:
        type: string
        example: "some_id"
        description: "A unique identifier for this entity provided by us"
      person_id:
        type: string
        example: "some_id"
        description: "The ID of the person or partner for whom an entity will be created"
      type:
        type: string
        example: "person"
        description: "The type of an entity"
        enum:
        - "PERSON"
        - "PARTNER"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which the entity was created"
        example: "2019-02-02T13:43:34Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which the entity was updated"
        example: "2019-02-02T13:43:34Z"
  Account:
    type: object
    properties:
      id:
        type: string
        example: "some_id"
        description: "A unique identifier for this account provided by us"
      entity_id:
        type: string
        example: "some_id"
        description: "A unique identifier for this entity for whom an account will be created"
      wallet_id:
        type: string
        example: "some_id"
        description: "The ID of the wallet for whom an account will be created"
      balance:
        type: string
        description: "Balance of the account"
        example: "123.00001234"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which the account was created"
        example: "2019-02-02T13:43:34Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which the account was updated"
        example: "2019-02-02T13:43:34Z"
  Address:
    type: object
    properties:
      id:
        type: string
        example: "some_id"
        description: "The ID of the address"
      address:
        type: "string"
        description: "A digital asset specific address"
        example: "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
      account_id:
        type: "string"
        description: "ID of the account the address belong to"
        example: "some_id"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which the address was created"
        example: "2019-02-02T13:43:34Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which the address was updated"
        example: "2019-02-02T13:43:34Z"
  LedgerEntry:
    discriminator: type
    type: object
    properties:
      id:
        type: string
        example: "some_id"
        description: "Ledger entry ID generated by our system"
      account_id:
        type: "string"
        description: "ID of the account the ledger entry belongs to"
        example: "some_id"
      transaction_id:
        type: "string"
        description: "ID of the transaction the ledger entry belongs to"
        example: "some_id"
      type:
        type: string
        example: "DEPOSIT_AMOUNT"
        description: "The type of a ledger entry"
        enum:
          - "DEPOSIT_AMOUNT"
          - "DEPOSIT_FEE"
          - "WITHDRAWAL_AMOUNT"
          - "WITHDRAWAL_FEE"
          - "TRANSFER_AMOUNT"
          - "TRANSFER_FEE"
      amount:
        type: string
        description: "Ledger entry amount, positive or negative"
        example: "123.00010000"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which a ledger entry was created"
        example: "2019-02-01T13:42:59Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which a ledger entry was updated"
        example: "2019-02-01T13:42:59Z"
  TransactionReference:
    type: object
    properties:
      transaction_id:
        type: string
        example: "some_id"
        description: "ID of the transaction created by request"
  Transaction:
    discriminator: type
    type: object
    properties:
      id:
        type: string
        example: "some_id"
        description: "Transaction ID generated by our system"
      account_id:
        type: "string"
        description: "ID of the account the transaction belongs to"
        example: "some_id"
      type:
        type: string
        example: "deposit"
        description: "The type of a transaction"
        enum:
          - "DEPOSIT"
          - "WITHDRAWAL"
          - "TRANSFER"
      state:
        type: string
        example: "pending"
        description: "The state of a transaction"
        enum:
          - "PENDING"
          - "FAILED"
          - "CONFIRMED"
      amount:
        type: string
        description: "Transacted amount, positive or negative"
        example: "123.00010000"
      fee_amount:
        type: string
        description: "Charged fee, always positive or 0"
        example: "0.00123000"
      total_amount:
        type: string
        description: "Credited/debited amount, positive or negative"
      created_at:
        type: string
        format: "ISO8601"
        description: "Time at which a transaction was created"
        example: "2019-02-01T13:42:59Z"
      updated_at:
        type: string
        format: "ISO8601"
        description: "Time at which a transaction was updated"
        example: "2019-02-01T13:42:59Z"
  Deposit:
    allOf:
      - $ref: '#/definitions/Transaction'
      - type: object
        properties:
          type:
            type: string
            description: "The type of a transaction"
            enum:
              - "DEPOSIT"
          address:
            type: "string"
            description: "A digital asset specific address used for deposit"
            example: "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
  Withdrawal:
    allOf:
      - $ref: '#/definitions/Transaction'
      - type: object
        properties:
          type:
            type: string
            description: "The type of a transaction"
            enum:
              - "WITHDRAWAL"
          address:
            type: "string"
            description: "A digital asset specific address used for withdrawal"
            example: "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
          reference:
            type: string
            example: "some_partner_generated_string"
            description: "A reference identifier provided by the partner"
  Transfer:
    allOf:
      - $ref: '#/definitions/Transaction'
      - type: object
        properties:
          type:
            type: string
            description: "The type of a transaction"
            enum:
              - "TRANSFER"
          reference:
            type: string
            example: "some_partner_generated_string"
            description: "A reference identifier provided by the partner"
          sender_account_id:
            type: "string"
            description: "ID of the sender account"
            example: "some_id"
          receiver_account_id:
            type: "string"
            description: "ID of the receiver account"
            example: "some_id"
